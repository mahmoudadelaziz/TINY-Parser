# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'draft.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from helper import *

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1120, 861)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.splitter = QtWidgets.QSplitter(self.centralwidget)
        self.splitter.setGeometry(QtCore.QRect(10, 20, 256, 801))
        self.splitter.setOrientation(QtCore.Qt.Vertical)
        self.splitter.setObjectName("splitter")
        self.InputTokens = QtWidgets.QTextEdit(self.splitter)
        self.InputTokens.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.InputTokens.setObjectName("InputTokens")
        self.pushButton = QtWidgets.QPushButton(self.splitter)
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(False)
        font.setWeight(50)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.Parseclicked)
        self.SyntaxCheckingResult = QtWidgets.QLabel(self.splitter)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.SyntaxCheckingResult.setFont(font)
        self.SyntaxCheckingResult.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.SyntaxCheckingResult.setAlignment(QtCore.Qt.AlignCenter)
        self.SyntaxCheckingResult.setObjectName("SyntaxCheckingResult")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1120, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    # --------------------------------- My code block START ---------------------------------
    def update(self):
        # This updates the size of the label to fit its content
        self.SyntaxCheckingResult.adjustSize()

    # We need to take the input tokens list FROM THE TEXTBOX!
    # And then do the Program() function on it.

    def Parseclicked(self):
        # The TINY Parser's Program() function goes here!
        # try:
            self.InputTokensText = self.InputTokens.toPlainText() # taking TokenText from text box
            self.TokensPlainText = self.InputTokensText # TokenText from text box
            self.tokensList = GetTokensListFromPlainText(self.TokensPlainText) # Making list of tokens
            self.SyntaxCheckingResult.setText(Parse(self.tokensList))
            self.update()
            print(f"[FOR GUI FILE] Cursor standing at #{cursor}")
        # except IndexError:
        #     self.SyntaxCheckingResult.setText(f"Cursor stopped at {str(cursor)}")
        #     print(f"Tokens read: {self.tokensList}")
    # --------------------------------- My code block END ---------------------------------

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "OurParser"))
        self.InputTokens.setToolTip(_translate(
            "MainWindow", "Write the list of tokens here"))
        self.InputTokens.setStatusTip(_translate(
            "MainWindow", "Here we enter the list of tokens to be passed on to OurParser"))
        self.InputTokens.setPlaceholderText(
            _translate("MainWindow", "Input list of tokens"))
        self.pushButton.setText(_translate("MainWindow", "Parse"))
        self.SyntaxCheckingResult.setText(
            _translate("MainWindow", "Parsing result..."))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
